<?php
/**
 * @package Mediboard\Patients
 * @author  SAS OpenXtrem <dev@openxtrem.com>
 * @license https://www.gnu.org/licenses/gpl.html GNU General Public License
 * @license https://www.openxtrem.com/licenses/oxol.html OXOL OpenXtrem Open License
 */

namespace Ox\Mediboard\Patients;

use Exception;
use Ox\Core\CAppUI;
use Ox\Core\CMbDT;
use Ox\Core\CMbObject;
use Ox\Core\Module\CModule;
use Ox\Core\CStoredObject;
use Ox\Mediboard\Cim10\CCodeCIM10;
use Ox\Mediboard\CompteRendu\CAideSaisie;
use Ox\Mediboard\Etablissement\CGroups;
use Ox\Mediboard\Loinc\CLoinc;
use Ox\Mediboard\Medicament\CMedicamentIndication;
use Ox\Mediboard\Mediusers\CMediusers;
use Ox\Mediboard\Sante400\CIdSante400;
use Ox\Mediboard\Snomed\CSnomed;

/**
 * Pathologie en cours des patients
 */
class CPathologie extends CMbObject {
  // DB Table key
  public $pathologie_id;

  // DB fields
  public $debut;
  public $fin;
  public $pathologie;
  public $type;
  public $annule;
  public $resolu;
  public $dossier_medical_id;
  public $indication_id;
  public $indication_group_id;
  public $ald;
  public $code_ald;
  public $code_cim10;

  public $owner_id;
  public $creation_date;

  /** @var CDossierMedical */
  public $_ref_dossier_medical;

  /** @var CMedicamentIndication */
  public $_ref_indication;

  /** @var CLoinc[] */
  public $_ref_codes_loinc;
  /** @var CSnomed[] */
  public $_ref_codes_snomed;

  /** @var CCodeCIM10 */
  public $_ref_code_cim10;

  /** @var CMediusers */
  public $_ref_owner;

  /**
   * @see parent::getSpec()
   */
  function getSpec() {
    $spec        = parent::getSpec();
    $spec->table = 'pathologie';
    $spec->key   = 'pathologie_id';

    return $spec;
  }

  /**
   * @inheritdoc
   */
  function getProps() {
    $props                        = parent::getProps();
    $props["debut"]               = "date progressive";
    $props["fin"]                 = "date progressive moreEquals|debut";
    $props["pathologie"]          = "text helped seekable";
    $props["type"]                = "enum list|probleme|pathologie default|pathologie notNull";
    $props["dossier_medical_id"]  = "ref notNull class|CDossierMedical show|0 back|pathologies";
    $props["indication_id"]       = "num show|0";
    $props["indication_group_id"] = "num show|0";
    $props["annule"]              = "bool show|0";
    $props["resolu"]              = "bool show|0";
    $props["owner_id"]            = "ref notNull class|CMediusers back|pathologies";
    $props["creation_date"]       = "dateTime notNull";
    $props['ald']                 = 'bool default|0';
    $props['code_ald']            = 'num min|0 max|32';
    $props['code_cim10']          = 'str';

    return $props;
  }

  /**
   * @see parent::updateFormFields()
   */
  function updateFormFields() {
    parent::updateFormFields();
    $this->_view = $this->pathologie;
  }

  public function updatePlainFields() {
    parent::updatePlainFields(); // TODO: Change the autogenerated stub

    if (!$this->pathologie && $this->code_cim10) {
      $this->pathologie = CCodeCIM10::get($this->code_cim10)->libelle;
    }
  }

  /**
   * Charge le dossier médical
   *
   * @return CDossierMedical
   */
  function loadRefDossierMedical() {
    return $this->_ref_dossier_medical = $this->loadFwdRef("dossier_medical_id");
  }

  /**
   * Gets the CIM code of the pathology
   *
   * @return CCodeCIM10 - the cim10 code
   */
  function loadRefCim10() {
    return $this->_ref_code_cim10 = CCodeCIM10::get($this->code_cim10);
  }

  /**
   * @return CMediusers|null
   * @throws Exception
   */
  function loadRefOwner() {
    return $this->_ref_owner = $this->loadFwdRef("owner_id");
  }

  /**
   * @see parent::loadView()
   */
  function loadView() {
    parent::loadView();
    $this->loadRefDossierMedical();
    $this->loadRefsCodesLoinc();
    $this->loadRefsCodesSnomed();
  }

  /**
   * @see parent::store()
   */
  function store() {
    // Save owner and creation date
    if (!$this->_id) {
      if (!$this->creation_date) {
        $this->creation_date = CMbDT::dateTime();
      }

      if (!$this->owner_id) {
        $this->owner_id = CMediusers::get()->_id;
      }
    }

    parent::store();

    // Check if it is an input help and if there are associated Loinc or Snomed codes
    if ($this->_id) {
      $this->checkInputHelp();
    }

    return null;
  }

  function loadRefIndication() {
    $medicament_indication = new CMedicamentIndication();

    return $this->_ref_indication = $medicament_indication->getIndication($this->indication_id, $this->indication_group_id);
  }

  /**
   * Count problems from an array of object
   *
   * @param CPathologie[] $problems potential problems
   *
   * @return int the amount of problems
   */
  static function amountProblems($problems) {
    return CPathologie::amountType($problems, "probleme");
  }

  /**
   * Count pathologies from an array of object
   *
   * @param CPathologie[] $pathologies - potential pathologies
   *
   * @return int the amount of pathologies
   */
  static function amountPathologies($pathologies) {
    return CPathologie::amountType($pathologies, "pathologie");
  }

  /**
   * Generic method to count the amount of type
   *
   * @param CPathologie[] $array - the pathologies
   * @param string        $type  - the type to count
   *
   * @return int the amount of 'types'
   */
  static function amountType($array, $type) {
    $count = 0;
    foreach ($array as $_array) {
      if ($_array->type === $type) {
        $count++;
      }
    }

    return $count;
  }

  /**
   * Return idex type if it's special
   *
   * @param CIdSante400 $idex Idex
   *
   * @return string|null
   */
  function getSpecialIdex(CIdSante400 $idex) {
    if (CModule::getActive('snomed') && ($idex->tag == CSnomed::getSnomedTag())) {
      return "SNOMED";
    }

    if (CModule::getActive('loinc') && ($idex->tag == CLoinc::getLoincTag())) {
      return "LOINC";
    }

    return null;
  }

  /**
   * Get all CLoinc[] backrefs
   *
   * @param CDossierMedical $dossierMedical Medical Folder
   *
   * @return CLoinc[]|null
   */
  function loadRefsCodesLoinc() {
    if (!CModule::getActive('loinc')) {
      return null;
    }

    $codes_loinc = array();

    $where        = array();
    $where["tag"] = " = '" . CLoinc::getLoincTag() . "'";
    $query        = "(object_class = '$this->_class' AND object_id = '$this->_id')";

    $where[] = $query;

    $groupby = "id_sante400.id400";

    $idex   = new CIdSante400();
    $idexes = $idex->loadList($where, null, null, $groupby);

    foreach ($idexes as $_idex) {
      $id = $_idex->id400;

      $loinc = new CLoinc();
      $loinc->load($id);

      $codes_loinc[$loinc->_id] = $loinc;
    }

    return $this->_ref_codes_loinc = $codes_loinc;
  }

  /**
   * Get all CSnomed[] backrefs
   *
   * @param CDossierMedical $dossierMedical Medical Folder
   *
   * @return CSnomed[]|null
   */
  function loadRefsCodesSnomed() {
    if (!CModule::getActive('snomed')) {
      return null;
    }

    $codes_snomed = array();
    $where        = array();
    $where["tag"] = " = '" . CSnomed::getSnomedTag() . "'";
    $query        = "(object_class = '$this->_class' AND object_id = '$this->_id')";

    $where[] = $query;

    $groupby = "id_sante400.id400";

    $idex   = new CIdSante400();
    $idexes = $idex->loadList($where, null, null, $groupby);


    foreach ($idexes as $_idex) {
      $id = $_idex->id400;

      $snomed = new CSnomed();
      $snomed->load($id);

      $codes_snomed[$snomed->_id] = $snomed;
    }

    return $this->_ref_codes_snomed = $codes_snomed;
  }

  /**
   * Check if it is an input help and if there are associated Loinc or Snomed codes
   *
   * @return void
   */
  function checkInputHelp() {
    if (!CModule::getActive('loinc') && !CModule::getActive('snomed')) {
      return null;
    }

    $group    = CGroups::loadCurrent();
    $user     = CMediusers::get();
    $function = $user->loadRefFunction();

    $pathologie = addslashes($this->pathologie);

    $where          = array();
    $where[]        = "group_id = '$group->_id' OR function_id = '$function->_id' OR user_id = '$user->_id'";
    $where["text"]  = " = '$pathologie'";
    $where["class"] = " = '$this->_class'";

    $aide  = new CAideSaisie();
    $aides = $aide->loadList($where);

    $aide_saisie = reset($aides);

    if ($aide_saisie && $aide_saisie->_id) {
      $codes_loinc  = $aide_saisie->loadRefsCodesLoinc();
      $codes_snomed = $aide_saisie->loadRefsCodesSnomed();

      if ($codes_loinc) {
        foreach ($codes_loinc as $_loinc) {
          $idex               = new CIdSante400();
          $idex->tag          = CLoinc::getLoincTag();
          $idex->object_class = $this->_class;
          $idex->object_id    = $this->_id;
          $idex->id400        = $_loinc->_id;

          if (!$idex->loadMatchingObjectEsc()) {
            $idex->store();
          }
        }
      }

      if ($codes_snomed) {
        foreach ($codes_snomed as $_snomed) {
          $idex               = new CIdSante400();
          $idex->tag          = CSnomed::getSnomedTag();
          $idex->object_class = $this->_class;
          $idex->object_id    = $this->_id;
          $idex->id400        = $_snomed->_id;

          if (!$idex->loadMatchingObjectEsc()) {
            $idex->store();
          }
        }
      }
    }
  }
}

