<?php

/**
 * @package Mediboard\Core
 * @author  SAS OpenXtrem <dev@openxtrem.com>
 * @license https://www.gnu.org/licenses/gpl.html GNU General Public License
 * @license https://www.openxtrem.com/licenses/oxol.html OXOL OpenXtrem Open License
 */

namespace Ox\Core\Version;

use DOMDocument;
use Ox\Core\CMbDT;
use Ox\Core\Exceptions\VersionException;
use Symfony\Component\Yaml\Yaml;

/**
 * Builder for the version
 */
final class Builder
{
    /* Language used to describe the version data */
    private const DEFAULT_LOCALE = 'fr_FR';

    public const VERSION_FILE = 'includes/version.php';

    /* File generated by ox-bundle-installer after successful install */
    private const BUNDLE_FILE = 'bundle.yml';

    /* Versioned release file generated after release branch creation */
    private const RELEASE_FILE = 'release.xml';

    public const APPLICATION_VERSION_MAJOR = 0;
    public const APPLICATION_VERSION_MINOR = 5;
    public const APPLICATION_VERSION_PATCH = 0;
    public const APPLICATION_VERSION_BUILD = 1005;

    public const KEY_MAJOR          = 'major';
    public const KEY_MINOR          = 'minor';
    public const KEY_PATCH          = 'patch';
    public const KEY_BUILD          = 'build';
    public const KEY_DATETIME_BUILD = 'datetime_build';
    public const KEY_TITLE          = 'title';
    public const KEY_TITLE_SHORT    = 'releaseTitle';
    public const KEY_UPDATE_DATE    = 'date';
    public const KEY_RELATIVE_DATE  = 'relative';
    public const KEY_CODE           = 'code';
    public const KEY_RELEASE_DATE   = 'releaseDate';
    public const KEY_COMPLETE_DATE  = 'releaseDateComplete';
    public const KEY_REVISION       = 'releaseRev';


    /**
     * @param string|null $versionFile
     * @param string|null $bundleFile
     * @param string|null $releaseFile
     *
     * @return string
     * @throws VersionException
     */
    public static function buildVersion(
        ?string $versionFile = null,
        ?string $bundleFile = null,
        ?string $releaseFile = null
    ): string {
        $time_start = microtime(true);

        $version_file = $versionFile ?? dirname(__DIR__, 3) . DIRECTORY_SEPARATOR . self::VERSION_FILE;
        if (file_exists($version_file)) {
            unlink($version_file);
        }

        $version = array_merge(
            [
                self::KEY_MAJOR          => self::APPLICATION_VERSION_MAJOR,
                self::KEY_MINOR          => self::APPLICATION_VERSION_MINOR,
                self::KEY_PATCH          => self::APPLICATION_VERSION_PATCH,
                self::KEY_BUILD          => self::APPLICATION_VERSION_BUILD,
                self::KEY_DATETIME_BUILD => CMbDT::dateTime(),
            ],
            self::parseReleaseData($bundleFile, $releaseFile)
        );

        $content = var_export($version, true);
        $content = '<?php ' . PHP_EOL . ' return ' . $content . ';';

        if (!file_put_contents($version_file, $content)) {
            throw new VersionException('Cannot write version file');
        }

        $_time = @round(microtime(true) - $time_start, 3);

        return "Generated version file in {$version_file} during {$_time} sec";
    }

    /**
     * @param string|null $bundleFile
     * @param string|null $releaseFile
     *
     * @return array
     */
    public static function parseReleaseData(?string $bundleFile = null, ?string $releaseFile = null): array
    {
        $release = [
            self::KEY_CODE          => null,
            self::KEY_COMPLETE_DATE => null,
            self::KEY_RELATIVE_DATE => null,
            self::KEY_RELEASE_DATE  => null,
            self::KEY_REVISION      => null,
            self::KEY_TITLE         => null,
            self::KEY_TITLE_SHORT   => null,
            self::KEY_UPDATE_DATE   => null,
        ];

        $bundleFile  = $bundleFile ?? dirname(__DIR__, 3) . DIRECTORY_SEPARATOR . self::BUNDLE_FILE;
        $releaseFile = $releaseFile ?? dirname(__DIR__, 3) . DIRECTORY_SEPARATOR . self::RELEASE_FILE;

        /* In order to translate the date contents, locale must be set for execution */
        setlocale(LC_TIME, self::DEFAULT_LOCALE);

        if (is_readable($releaseFile)) {
            // To prevent a "failed to load external entity error"
            if (PHP_VERSION_ID < 80000) {
                libxml_disable_entity_loader(false);
            }
            $releaseInfoDOM = new DOMDocument();
            $releaseInfoDOM->load($releaseFile, LIBXML_NONET);

            $releaseElement = $releaseInfoDOM->documentElement;

            if ($releaseElement) {
                $release[self::KEY_CODE] = $releaseElement->getAttribute("code");
                [$year, $month] = explode("_", $release[self::KEY_CODE]);
                $title = ucfirst(CMbDT::strftime("%B", mktime(0, 0, 0, $month, 10))) . " " . $year;

                $release[self::KEY_TITLE_SHORT]   = $title;
                $release[self::KEY_TITLE]         = $release[self::KEY_TITLE_SHORT];
                $release[self::KEY_RELEASE_DATE]  = CMbDT::format(
                    $releaseElement->getAttribute("date"),
                    CMbDT::ISO_DATETIME
                );
                $release[self::KEY_COMPLETE_DATE] = $releaseElement->getAttribute("date");
                $release[self::KEY_REVISION]      = $releaseElement->getAttribute("rev");
            }
        }

        if (is_readable($bundleFile)) {
            $yml = Yaml::parseFile($bundleFile);

            $release[self::KEY_UPDATE_DATE]   = $yml['last_update'] ?? null;
            $release[self::KEY_CODE]          = $yml['release_code'] ?? null;
            $release[self::KEY_REVISION]      = $yml['uuid'] ?? null;
            $release[self::KEY_RELATIVE_DATE] = CMbDT::relativeDuration($release[self::KEY_UPDATE_DATE]);

            $release[self::KEY_TITLE] .= PHP_EOL .
                'Date : ' . CMbDT::dateToLocale(
                    $release[self::KEY_UPDATE_DATE] . PHP_EOL .
                    'Revision : ' . $release[self::KEY_REVISION]
                );
        }

        return $release;
    }
}
